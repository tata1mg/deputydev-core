from deputydev_core.services.repo.local_repo.dataclasses.main import DiffTypes
from deputydev_core.services.repo.local_repo.local_repo_factory import LocalRepoFactory

if __name__ == "__main__":

    local_repo = LocalRepoFactory.get_local_repo(repo_path="/Users/satyam.kumar/projects/1mg/payment_engine")
    print("Local Repo: ", local_repo)

    file_wise_diff = {
        "app/managers/engine/orders/auto_pof/validation.py": "\n--- a/app/managers/engine/orders/auto_pof/validation.py\n+++ b/app/managers/engine/orders/auto_pof/validation.py\n@@ -1,9 +1,9 @@\n class AutoPOFValidationManager:\n     @classmethod\n     async def is_auto_pof_valid_from_engine(\n         cls, order_id: str, source: TransactionSource\n-    ) -> bool:  # XXX [move to order manager] can be a operation on order\n-        # step 1: get failed/pending payment transactions for order\n+    ) -> Tuple[bool, List[str]]:  # XXX [move to order manager] can be a operation on order\n+        # step 1: get failed/pending payment transactions for order and extract payment methods\n         failed_or_pending_transactions = await CoreTransactionManager.list_by_filter(  # XXX list  by filter looks like a db operation. it shoud have the business operation\n             order_ids=[order_id],\n             filters=PaymentTransactionFilters(\n@@ -14,15 +14,17 @@ class AutoPOFValidationManager:\n                 source=[source],\n             ),\n         )\n+        failed_payment_methods = [t.payment_method for t in failed_or_pending_transactions if t.payment_method]\n+        \n         # if no failed/pending transactions, then auto pof is not valid\n         if not failed_or_pending_transactions:\n-            return False\n+            return False, []\n \n         # TODO: get min transaction count from vertical flow config\n         # if failed/pending transactions count is less than min transaction count, then auto pof is not valid\n         if len(failed_or_pending_transactions) < 2:\n-            return False\n+            return False, failed_payment_methods\n \n-        return True\n+        return True, failed_payment_methods\n",
        "app/managers/engine/orders/auto_pof/manager.py": '\n--- a/app/managers/engine/orders/auto_pof/manager.py\n+++ b/app/managers/engine/orders/auto_pof/manager.py\n@@ -6,7 +6,7 @@ class AutoPOFManager:\n         cls, order_id: str, source: TransactionSource, user_id: str, headers: Header, client: Client\n     ) -> AutoPOFPageData:\n         # step 1: check validity for auto pof for order by payment engine and the business vertical by doing parallel calls\n-        is_auto_pof_valid_from_engine, is_pof_valid_from_vertical = await asyncio.gather(\n+        (is_auto_pof_valid_from_engine, failed_payment_methods), is_pof_valid_from_vertical = await asyncio.gather(\n             AutoPOFValidationManager.is_auto_pof_valid_from_engine(order_id=order_id, source=source),\n             AutoPOFValidationManager.is_pof_valid_from_vertical(\n                 order_id=order_id, source=source, user_id=user_id, headers=headers\n@@ -23,6 +23,7 @@ class AutoPOFManager:\n         data = AutoPOFPageData(\n             order_id=order_id,\n             header=TextWithIcon(\n+                text=f"Oops! Your payment has failed using {\', \'.join(failed_payment_methods)}",\n                 text="Oops! Your payment has failed",\n                 icon="https://onemg.gumlet.io/marketing/f3cb599e-c75b-4cad-aaa3-f56a0d6d3b7f.png",\n             ),\n@@ -33,6 +34,7 @@ class AutoPOFManager:\n                 text="Order will be placed in 10 seconds. You can still pay online after placement",\n                 icon="https://onemg.gumlet.io/marketing/ff3b64ef-42f2-4c97-9deb-d389ef2927da.png",\n             ),\n+            failed_payment_methods=failed_payment_methods,\n             payment_method_cta=AutoPOFPageCTA(\n                 action="REDIRECT",\n                 text="Try different payment method",\n@@ -50,6 +52,7 @@ class AutoPOFManager:\n                         event_data=AutoCodOtherModesData(\n                             business_unit=source.value.lower(),\n                             is_cp_member=user_info.is_care_plan_active or False,\n+                            failed_payment_methods=failed_payment_methods,\n                             # user_type="UNKNOWN".lower(),  # todo get from cart\n                             # user_payment_type=user_info.online_mode_user or False,\n                             # to_be_paid=0,  # todo get from cart\n@@ -74,6 +77,7 @@ class AutoPOFManager:\n                         event_data=AutoCodCancelledData(\n                             business_unit=source.value.lower(),\n                             is_cp_member=user_info.is_care_plan_active or False,\n+                            failed_payment_methods=failed_payment_methods,\n                             # user_type="UNKNOWN".lower(),  # todo get from cart\n                             # user_payment_type=user_info.online_mode_user or False,\n                             # to_be_paid=0,  # todo get from cart\n@@ -91,6 +95,7 @@ class AutoPOFManager:\n                 event_data=AutoCodViewedData(\n                     business_unit=source.value.lower(),\n                     is_cp_member=user_info.is_care_plan_active or False,\n+                    failed_payment_methods=failed_payment_methods,\n                     # user_type="UNKNOWN".lower(),  # todo get from cart\n                     # user_payment_type=UserInfo.is_online_mode_user(user_id),\n                     # to_be_paid=0,  # todo get from cart\n',
        "app/managers/engine/orders/types/auto_pof.py": "\n--- a/app/managers/engine/orders/types/auto_pof.py\n+++ b/app/managers/engine/orders/types/auto_pof.py\n@@ -13,4 +13,5 @@ class AutoPOFPageData(BaseModel):\n     payment_method_cta: AutoPOFPageCTA\n     cancel_cta: AutoPOFPageCTA\n     analytics_data: Dict[str, Any] = {}\n+    failed_payment_methods: List[str] = []\n",
    }

    local_repo.apply_diff(file_wise_diff, DiffTypes.UDIFF)
